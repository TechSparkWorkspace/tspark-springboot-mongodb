plugins {
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'java'
    id 'jacoco'
}

group = 'org.techspark'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Core
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0")

    // Lombok
    implementation("org.projectlombok:lombok:1.18.28")
    annotationProcessor("org.projectlombok:lombok:1.18.28")

    // MapStruct
    implementation("org.mapstruct:mapstruct:1.5.5.Final")
    annotationProcessor("org.mapstruct:mapstruct-processor:1.5.5.Final")

    //Mongo DB
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
//    implementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:4.6.3'

    // Spring Boot Test
    testImplementation("org.springframework.boot:spring-boot-starter-test")

}

def createFeatureStructure(feature) {
    def featurePath = "src/main/java/org/techspark/starter/${feature}"
    file("${featurePath}/controller").mkdirs()
    file("${featurePath}/dto").mkdirs()
    file("${featurePath}/entity").mkdirs()
    file("${featurePath}/mapper").mkdirs()
    file("${featurePath}/repository").mkdirs()
    file("${featurePath}/service").mkdirs()
}

task setupFeatureStructure {
    doLast {
        createFeatureStructure("portfolio")
    }
}

tasks.test {
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
}

jacoco {
    toolVersion = "0.8.8"
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)

    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
    }
}